name: Check Firefox Packages

on:
  schedule:
    - cron: "0 */6 * * *" # every 6 hours starting from 00:00 UTC
  workflow_dispatch:

jobs:
  check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [aarch64, arm, x86_64, i686] # parallel jobs per arch

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget gzip xz-utils zstd tar tree

      - name: Run Firefox checker for ${{ matrix.arch }}
        id: check
        run: |
          ARCH="${{ matrix.arch }}"
          mkdir -p firefox/latest
          REPO_URL="https://packages-cf.termux.dev/apt/termux-x11/dists/x11/main"
          updated=0

          echo "Checking for $ARCH..."

          wget -qO - "$REPO_URL/binary-$ARCH/Packages.gz" | zgrep -A 10 '^Package: firefox$' > tmp.txt

          version=$(grep '^Version:' tmp.txt | head -n1 | sed 's/Version: //')
          filename=$(grep '^Filename:' tmp.txt | head -n1 | sed 's/Filename: //')

          echo "Found version: $version"
          echo "Filename: $filename"

          verfile="firefox/latest/firefox_version_${ARCH}.txt"
          archivefile="firefox/latest/firefox_latest_${ARCH}.tar.xz"

          oldver=$(cat "$verfile" 2>/dev/null || echo "none")

          if [ "$version" != "$oldver" ] || [ ! -f "$archivefile" ]; then
            echo "Updating $ARCH..."

            debfile="firefox_${ARCH}.deb"
            wget -O "$debfile" "https://packages-cf.termux.dev/apt/termux-x11/$filename"

            # Extract firefox folder from .deb
            workdir="$(pwd)/deb_extract_temp_$ARCH"
            rm -rf "$workdir" firefox
            mkdir -p "$workdir"
            
            ar x "$debfile" --output="$workdir"

            if [ -f "$workdir/data.tar.xz" ]; then
              tar -xvf "$workdir/data.tar.xz" -C "$workdir"
            elif [ -f "$workdir/data.tar.zst" ]; then
              tar --zstd -xf "$workdir/data.tar.zst" -C "$workdir"
            elif [ -f "$workdir/data.tar.gz" ]; then
              tar -xvf "$workdir/data.tar.gz" -C "$workdir"
            else
              echo "Error: data.tar.* not found in the .deb"
              exit 1
            fi

            pwd
            ls
            firefox_source="$workdir/data/data/com.termux/files/usr/lib/firefox"
            if [ -d "$firefox_source" ]; then
              cp -a "$firefox_source" "firefox"
            else
              echo "Error: Firefox folder not found at expected path"
              exit 1
            fi
            echo "---------------"
            ls
            echo "--------"
            tree

            tar -cJf "$archivefile" firefox

            # Clean up extracted files and deb
            rm -rf "$workdir" "$debfile" firefox

            echo "$version" > "$verfile"
            updated=1
          else
            echo "$ARCH is already up to date."
          fi

          rm -f tmp.txt
          echo "updated=$updated" >> $GITHUB_OUTPUT

      - name: Commit and push archives to artifacts branch
        if: steps.check.outputs.updated == '1'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Clone artifacts branch only
          git clone --single-branch --branch artifacts "https://github.com/${{ github.repository }}.git" artifacts_branch

          # Copy updated archive and version file
          cp firefox/latest/firefox_latest_${{ matrix.arch }}.tar.xz artifacts_branch/
          cp firefox/latest/firefox_version_${{ matrix.arch }}.txt artifacts_branch/

          cd artifacts_branch
          git add firefox_latest_${{ matrix.arch }}.tar.xz firefox_version_${{ matrix.arch }}.txt
          version=$(cat firefox_version_${{ matrix.arch }}.txt || echo "unknown")
          git commit -m "Update Firefox ${{ matrix.arch }} to version $version" || echo "Nothing to commit"
          git push "https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git" artifacts
