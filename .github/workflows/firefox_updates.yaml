release:
  needs: check
  runs-on: ubuntu-latest
  steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: List files
      run: ls -R artifacts || echo "No artifacts"

    - name: Decide whether to release
      id: decide
      run: |
        artifact_count=$(find artifacts -name 'firefox_latest_*.tar.xz' | wc -l)
        echo "Found $artifact_count updated artifacts."

        if [ "$artifact_count" -eq 0 ]; then
          echo "Nothing updated, skip release."
          echo "proceed=false" >> $GITHUB_OUTPUT
        else
          echo "Updates found â†’ proceed with release."
          echo "proceed=true" >> $GITHUB_OUTPUT
        fi

    - name: Get version for tag
      id: version
      run: |
        # Get upstream version (all artifacts have same version)
        upstream_version=$(find artifacts -name 'firefox_latest_*.tar.xz' | head -n1 | sed -E 's|.*/firefox_latest_.*\.tar\.xz$||')

        # Get latest tag
        latest_release_json=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/latest")
        latest_tag=$(echo "$latest_release_json" | jq -r .tag_name)
        echo "Latest GitHub release tag: $latest_tag"

        latest_version_only=$(echo "$latest_tag" | sed 's/_.*//')
        latest_revision=$(echo "$latest_tag" | grep -o '_.*' | sed 's/_//')

        # Get revision input (if manual run)
        revision_input="${{ github.event.inputs.revision }}"

        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          if [ -n "$revision_input" ]; then
            tag="${upstream_version}_$revision_input"
          else
            # Auto bump: increment last revision if same version
            if [ "$upstream_version" == "$latest_version_only" ]; then
              new_rev=$((latest_revision + 1))
              tag="${upstream_version}_$new_rev"
            else
              tag="$upstream_version"
            fi
          fi
        else
          tag="$upstream_version"
        fi

        echo "Chosen tag: $tag"
        echo "tag=$tag" >> $GITHUB_OUTPUT

    - name: Create and push Git tag
      if: steps.decide.outputs.proceed == 'true'
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git fetch --tags
        git tag ${{ steps.version.outputs.tag }}
        git push origin ${{ steps.version.outputs.tag }}

    - name: Create GitHub Release
      if: steps.decide.outputs.proceed == 'true'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        name: "Firefox Termux ${{ steps.version.outputs.tag }}"
        files: artifacts/*/firefox_latest_*.tar.xz
        fail_on_unmatched_files: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
