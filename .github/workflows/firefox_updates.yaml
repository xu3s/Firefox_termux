name: Check Firefox Packages

on:
  schedule:
    - cron: "0 */6 * * *" # every 6 hours
  workflow_dispatch:

jobs:
  check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [aarch64, arm, x86_64, i686]
      fail-fast: false

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget gzip xz-utils zstd tar tree curl jq

      - name: Get Firefox version from Packages.gz
        id: get_version
        run: |
          ARCH="${{ matrix.arch }}"
          REPO_URL="https://packages-cf.termux.dev/apt/termux-x11/dists/x11/main"

          echo "Fetching Packages.gz for $ARCH..."
          wget -qO - "$REPO_URL/binary-$ARCH/Packages.gz" | zgrep -A 10 '^Package: firefox$' > tmp.txt

          version=$(grep '^Version:' tmp.txt | head -n1 | sed 's/Version: //')
          filename=$(grep '^Filename:' tmp.txt | head -n1 | sed 's/Filename: //')

          echo "Found Firefox version: $version"
          echo "Filename: $filename"

          echo "version=$version" >> $GITHUB_OUTPUT
          echo "filename=$filename" >> $GITHUB_OUTPUT

      - name: Compare with latest release
        id: check_update
        run: |
          version="${{ steps.get_version.outputs.version }}"
          latest_release=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r '.tag_name // ""')

          echo "Current version in Packages.gz: $version"
          echo "Latest release version: ${latest_release:-none}"

          if [ "${{ github.event_name }}" == "workflow_dispatch" ] || [ "$version" != "$latest_release" ]; then
            echo "Update needed"
            echo "update_needed=true" >> $GITHUB_OUTPUT
          else
            echo "Already up-to-date"
            echo "update_needed=false" >> $GITHUB_OUTPUT
          fi

      - name: Download and package Firefox
        if: steps.check_update.outputs.update_needed == 'true'
        run: |
          ARCH="${{ matrix.arch }}"
          filename="${{ steps.get_version.outputs.filename }}"

          echo "Downloading Firefox for $ARCH..."
          wget -O "firefox_$ARCH.deb" "https://packages-cf.termux.dev/apt/termux-x11/$filename"

          echo "Extracting package..."
          mkdir -p extract
          ar x "firefox_$ARCH.deb" --output=extract

          if [ -f "extract/data.tar.xz" ]; then
            tar -xf "extract/data.tar.xz" -C extract
          elif [ -f "extract/data.tar.zst" ]; then
            tar --zstd -xf "extract/data.tar.zst" -C extract
          else
            echo "Error: No supported data archive found"
            exit 1
          fi

          echo "Creating tarball..."
          firefox_dir="extract/data/data/com.termux/files/usr/lib/firefox"
          tar -cJf "firefox_latest_$ARCH.tar.xz" -C "$firefox_dir" .

          echo "Cleaning up..."
          rm -rf extract "firefox_$ARCH.deb"

      - name: Upload artifact
        if: steps.check_update.outputs.update_needed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: firefox_${{ matrix.arch }}
          path: firefox_latest_${{ matrix.arch }}.tar.xz

  release:
    needs: check
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Verify artifacts
        run: |
          echo "Artifacts directory contents:"
          ls -R artifacts
          artifact_count=$(find artifacts -name 'firefox_latest_*.tar.xz' | wc -l)
          echo "Found $artifact_count artifacts"

      - name: Set release version
        id: set_version
        run: |
          version="${{ needs.check.outputs.version }}"
          if [ -z "$version" ]; then
            echo "Error: Could not determine version from check job"
            exit 1
          fi
          echo "Using version: $version"
          echo "tag=$version" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: success()
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.set_version.outputs.tag }}
          name: "Firefox Termux ${{ steps.set_version.outputs.tag }}"
          files: |
            artifacts/*/firefox_latest_aarch64.tar.xz
            artifacts/*/firefox_latest_arm.tar.xz
            artifacts/*/firefox_latest_x86_64.tar.xz
            artifacts/*/firefox_latest_i686.tar.xz
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
