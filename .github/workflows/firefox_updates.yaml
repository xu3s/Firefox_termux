name: Check Firefox Packages

on:
  schedule:
    - cron: "0 */6 * * *" # every 6 hours
  workflow_dispatch:

jobs:
  check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [aarch64, arm, x86_64, i686]
      fail-fast: false # Allow all jobs to run even if one fails

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget gzip xz-utils zstd tar tree curl

      - name: Run Firefox checker for ${{ matrix.arch }}
        id: check
        run: |
          ARCH="${{ matrix.arch }}"
          REPO_URL="https://packages-cf.termux.dev/apt/termux-x11/dists/x11/main"
          updated=0

          echo "Checking for $ARCH..."

          wget -qO - "$REPO_URL/binary-$ARCH/Packages.gz" | zgrep -A 10 '^Package: firefox$' > tmp.txt

          version=$(grep '^Version:' tmp.txt | head -n1 | sed 's/Version: //')
          filename=$(grep '^Filename:' tmp.txt | head -n1 | sed 's/Filename: //')

          echo "Found version: $version"
          echo "Filename: $filename"

          # Check latest release version (once per arch)
          latest_release_url="https://api.github.com/repos/${{ github.repository }}/releases/latest"
          latest_version=$(curl -s "$latest_release_url" | grep 'tag_name' | sed -E 's/.*"([^"]+)".*/\1/' || echo "none")
          echo "Latest release version: $latest_version"

          if [ "$version" != "$latest_version" ]; then
            echo "Updating $ARCH..."

            debfile="firefox_${ARCH}.deb"
            wget -O "$debfile" "https://packages-cf.termux.dev/apt/termux-x11/$filename"

            # Extract
            workdir="deb_extract_temp_$ARCH"
            rm -rf "$workdir" firefox
            mkdir -p "$workdir"
            ar x "$debfile" --output="$workdir"

            if [ -f "$workdir/data.tar.xz" ]; then
              tar -xf "$workdir/data.tar.xz" -C "$workdir"
            elif [ -f "$workdir/data.tar.zst" ]; then
              tar --zstd -xf "$workdir/data.tar.zst" -C "$workdir"
            elif [ -f "$workdir/data.tar.gz" ]; then
              tar -xf "$workdir/data.tar.gz" -C "$workdir"
            else
              echo "Error: data.tar.* not found in the .deb"
              exit 1
            fi

            firefox_source="$workdir/data/data/com.termux/files/usr/lib/firefox"
            if [ -d "$firefox_source" ]; then
              cp -a "$firefox_source" "firefox"
            else
              echo "Error: Firefox folder not found at expected path"
              exit 1
            fi

            tarfile="firefox_latest_${ARCH}.tar.xz"
            tar -cJf "$tarfile" firefox

            rm -rf "$workdir" "$debfile" firefox tmp.txt

            echo "tarfile=$tarfile" >> $GITHUB_OUTPUT
            echo "version=$version" >> $GITHUB_OUTPUT
            echo "updated=1" >> $GITHUB_OUTPUT
          else
            echo "$ARCH is already up to date."
            echo "updated=0" >> $GITHUB_OUTPUT
          fi

  release:
    needs: check
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List files
        run: ls -R artifacts

      - name: Get version from one arch
        id: version
        run: |
          version=$(ls artifacts/*/firefox_latest_*.tar.xz | head -n1 | sed -E 's/.*_(.*)\.tar\.xz/\1/')
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Create or update release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: "Firefox Termux ${{ steps.version.outputs.version }}"
          files: artifacts/*/firefox_latest_*.tar.xz
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
