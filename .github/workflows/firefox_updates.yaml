name: Firefox Termux Packages

on:
  schedule:
    - cron: "0 */6 * * *" # Every 6 hours
  workflow_dispatch:
    inputs:
      force:
        description: "Force release even if no update"
        required: false
        default: "false"

jobs:
  check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [aarch64, arm, x86_64, i686]
      fail-fast: false

    outputs:
      firefox_version: ${{ steps.version_extract.outputs.version }}
      needs_update: ${{ steps.version_check.outputs.needs_update }}
      force_release: ${{ github.event.inputs.force }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget gzip xz-utils zstd tar tree curl jq

      - name: Extract Firefox version
        id: version_extract
        run: |
          echo "Fetching Packages.gz for ${{ matrix.arch }}..."
          repo_url="https://packages-cf.termux.dev/apt/termux-x11/dists/x11/main"
          pkg_file=$(mktemp)

          wget -qO - "$repo_url/binary-${{ matrix.arch }}/Packages.gz" | zgrep -A 10 '^Package: firefox$' > "$pkg_file"

          version=$(grep -m1 '^Version:' "$pkg_file" | cut -d' ' -f2)
          filename=$(grep -m1 '^Filename:' "$pkg_file" | cut -d' ' -f2)

          if [ -z "$version" ] || [ -z "$filename" ]; then
            echo "::error::Failed to extract version/filename from Packages.gz"
            exit 1
          fi

          echo "Extracted version: $version"
          echo "filename=$filename" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT
          rm "$pkg_file"

      - name: Check against latest release
        id: version_check
        run: |
          current_version="${{ steps.version_extract.outputs.version }}"
          latest_release=$(curl -s \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest" \
            | jq -r '.tag_name // ""')

          echo "Current version: $current_version"
          echo "Latest release: ${latest_release:-none}"

          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && \
             [ "${{ github.event.inputs.force }}" == "true" ]; then
            echo "Manual forced release"
            echo "needs_update=true" >> $GITHUB_OUTPUT
          elif [ "$current_version" != "$latest_release" ]; then
            echo "New version available"
            echo "needs_update=true" >> $GITHUB_OUTPUT
          else
            echo "Already up-to-date"
            echo "needs_update=false" >> $GITHUB_OUTPUT
          fi

      - name: Download and package Firefox
        if: steps.version_check.outputs.needs_update == 'true'
        run: |
          set -euo pipefail
          arch="${{ matrix.arch }}"
          filename="${{ steps.version_extract.outputs.filename }}"
          temp_dir=$(mktemp -d)

          echo "Downloading Firefox for $arch..."
          wget --progress=dot:giga -O "$temp_dir/firefox.deb" \
            "https://packages-cf.termux.dev/apt/termux-x11/$filename"

          echo "Extracting package..."
          mkdir -p "$temp_dir/extract"
          ar x "$temp_dir/firefox.deb" --output="$temp_dir/extract"

          # Handle different compression formats
          if [ -f "$temp_dir/extract/data.tar.xz" ]; then
            tar -xf "$temp_dir/extract/data.tar.xz" -C "$temp_dir/extract"
          elif [ -f "$temp_dir/extract/data.tar.zst" ]; then
            zstd -dc "$temp_dir/extract/data.tar.zst" | tar -x -C "$temp_dir/extract"
          else
            echo "::error::No supported data archive found in .deb"
            exit 1
          fi

          echo "Creating tarball..."
          firefox_dir="$temp_dir/extract/data/data/com.termux/files/usr/lib/firefox"
          if [ ! -d "$firefox_dir" ]; then
            echo "::error::Firefox directory not found at expected path"
            exit 1
          fi

          tar -cJf "firefox_latest_$arch.tar.xz" -C "$firefox_dir" .
          rm -rf "$temp_dir"
          echo "Created firefox_latest_$arch.tar.xz"

      - name: Upload artifact
        if: steps.version_check.outputs.needs_update == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: firefox_${{ matrix.arch }}
          path: firefox_latest_${{ matrix.arch }}.tar.xz
          retention-days: 1

  release:
    needs: check
    if: ${{ needs.check.outputs.needs_update == 'true' || needs.check.outputs.force_release == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: firefox_*
          merge-multiple: true

      - name: Verify artifacts
        run: |
          echo "Artifact directory structure:"
          tree artifacts || true

          echo "Checking artifacts..."
          shopt -s nullglob
          artifacts=(artifacts/firefox_latest_*.tar.xz)
          artifact_count=${#artifacts[@]}

          if [ "$artifact_count" -eq 0 ]; then
            echo "::warning::No artifacts found!"
          else
            echo "Found $artifact_count artifact(s):"
            printf -- '- %s\n' "${artifacts[@]}"
            
            # Verify each artifact
            for artifact in "${artifacts[@]}"; do
              echo "Verifying $artifact..."
              if ! tar -tf "$artifact" >/dev/null; then
                echo "::error::Invalid tarball: $artifact"
                exit 1
              fi
            done
          fi

      - name: Set release version
        id: set_version
        run: |
          version="${{ needs.check.outputs.firefox_version }}"
          if [ -z "$version" ]; then
            echo "::error::Could not determine Firefox version"
            echo "Debug outputs:"
            echo "${{ toJSON(needs.check.outputs) }}"
            exit 1
          fi

          echo "Creating release for version: $version"
          echo "tag=$version" >> $GITHUB_OUTPUT
          echo "name=Firefox Termux $version" >> $GITHUB_OUTPUT

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.set_version.outputs.tag }}
          name: ${{ steps.set_version.outputs.name }}
          files: |
            artifacts/firefox_latest_aarch64.tar.xz
            artifacts/firefox_latest_arm.tar.xz
            artifacts/firefox_latest_x86_64.tar.xz
            artifacts/firefox_latest_i686.tar.xz
          generate_release_notes: true
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
